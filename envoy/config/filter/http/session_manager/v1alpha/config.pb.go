// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: envoy/config/filter/http/session_manager/v1alpha/config.proto

package envoy_config_filter_http_session_manager_v1alpha

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/lyft/protoc-gen-validate/validate"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TokenBinding_HkdfHash int32

const (
	TokenBinding_SHA256 TokenBinding_HkdfHash = 0
	TokenBinding_SHA384 TokenBinding_HkdfHash = 1
	TokenBinding_SHA512 TokenBinding_HkdfHash = 2
)

var TokenBinding_HkdfHash_name = map[int32]string{
	0: "SHA256",
	1: "SHA384",
	2: "SHA512",
}
var TokenBinding_HkdfHash_value = map[string]int32{
	"SHA256": 0,
	"SHA384": 1,
	"SHA512": 2,
}

func (x TokenBinding_HkdfHash) String() string {
	return proto.EnumName(TokenBinding_HkdfHash_name, int32(x))
}
func (TokenBinding_HkdfHash) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_config_0219500859f2b66b, []int{1, 0}
}

type TokenBinding_EncryptionAlg int32

const (
	TokenBinding_AES128GCM TokenBinding_EncryptionAlg = 0
	TokenBinding_AES256GCM TokenBinding_EncryptionAlg = 1
)

var TokenBinding_EncryptionAlg_name = map[int32]string{
	0: "AES128GCM",
	1: "AES256GCM",
}
var TokenBinding_EncryptionAlg_value = map[string]int32{
	"AES128GCM": 0,
	"AES256GCM": 1,
}

func (x TokenBinding_EncryptionAlg) String() string {
	return proto.EnumName(TokenBinding_EncryptionAlg_name, int32(x))
}
func (TokenBinding_EncryptionAlg) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_config_0219500859f2b66b, []int{1, 1}
}

// This message specifies how a token can be mapped into an HTTP header.
//
// Example:
//
// .. code-block:: yaml
//
//     name: authorization
//     preamble: Bearer
//
// [#not-implemented-hide:]
type ForwardRule struct {
	// The name of the header to use use to forward a token.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// An optional preamble that can be inserted in front of the token value.
	// An obvious example is the preamble of "Bearer". A preamble and token
	// will be separated by a space.
	Preamble             string   `protobuf:"bytes,2,opt,name=preamble,proto3" json:"preamble,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForwardRule) Reset()         { *m = ForwardRule{} }
func (m *ForwardRule) String() string { return proto.CompactTextString(m) }
func (*ForwardRule) ProtoMessage()    {}
func (*ForwardRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_config_0219500859f2b66b, []int{0}
}
func (m *ForwardRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForwardRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForwardRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ForwardRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwardRule.Merge(dst, src)
}
func (m *ForwardRule) XXX_Size() int {
	return m.Size()
}
func (m *ForwardRule) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwardRule.DiscardUnknown(m)
}

var xxx_messageInfo_ForwardRule proto.InternalMessageInfo

func (m *ForwardRule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ForwardRule) GetPreamble() string {
	if m != nil {
		return m.Preamble
	}
	return ""
}

// This message specifies the configuation needed to enable both the generation
// and validation of session binding tokens to provide cross-site request forgery protection.
//
// Example:
//
// .. code-block:: yaml
//
//     secret: Mb07unY1jd4h2s5wUSO9KJzhqjVTazXMWCp4OAiiGko=
//     token: __Secure-acme-session-cookie
//     binding: x-xsrf-token
//
// [#not-implemented-hide:]
type TokenBinding struct {
	// The 256-bit base64 encoded shared secret used to validate cryptographic session token bindings.
	Secret string `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
	// The name of the session token cookie. It is recommended that this value start with
	// the string "__Secure-" as described at
	// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// The name of the header that includes the cryptographic session token binding. A good choices
	// for this field are x-xsrf-token or x-csrf-token
	Binding string `protobuf:"bytes,3,opt,name=binding,proto3" json:"binding,omitempty"`
	// The hash algorithm to be used in the HKDF key derivation
	HkdfHash TokenBinding_HkdfHash `protobuf:"varint,4,opt,name=hkdf_hash,json=hkdfHash,proto3,enum=envoy.config.filter.http.session_manager.v1alpha.TokenBinding_HkdfHash" json:"hkdf_hash,omitempty"`
	// The encryption algorithm to use for token encryption
	EncryptionAlg        TokenBinding_EncryptionAlg `protobuf:"varint,5,opt,name=encryption_alg,json=encryptionAlg,proto3,enum=envoy.config.filter.http.session_manager.v1alpha.TokenBinding_EncryptionAlg" json:"encryption_alg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *TokenBinding) Reset()         { *m = TokenBinding{} }
func (m *TokenBinding) String() string { return proto.CompactTextString(m) }
func (*TokenBinding) ProtoMessage()    {}
func (*TokenBinding) Descriptor() ([]byte, []int) {
	return fileDescriptor_config_0219500859f2b66b, []int{1}
}
func (m *TokenBinding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenBinding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenBinding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TokenBinding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenBinding.Merge(dst, src)
}
func (m *TokenBinding) XXX_Size() int {
	return m.Size()
}
func (m *TokenBinding) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenBinding.DiscardUnknown(m)
}

var xxx_messageInfo_TokenBinding proto.InternalMessageInfo

func (m *TokenBinding) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *TokenBinding) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *TokenBinding) GetBinding() string {
	if m != nil {
		return m.Binding
	}
	return ""
}

func (m *TokenBinding) GetHkdfHash() TokenBinding_HkdfHash {
	if m != nil {
		return m.HkdfHash
	}
	return TokenBinding_SHA256
}

func (m *TokenBinding) GetEncryptionAlg() TokenBinding_EncryptionAlg {
	if m != nil {
		return m.EncryptionAlg
	}
	return TokenBinding_AES128GCM
}

// This message specifies the configuration of a Session Manager filter that
// can be used to extract, validate and forward session tokens. It is expected
// that a secure transport is used (HTTPS), the token cookie has appropriate
// attributes such as Secure and SameSite applied and that the binding cookie
// has the Secure, SameSite and HttpOnly attributes applied.
//
// Example:
//
// .. code-block:: yaml
//
//     token_binding:
//       secret: Mb07unY1jd4h2s5wUSO9KJzhqjVTazXMWCp4OAiiGko=
//       token: __Secure-acme-session-cookie
//       binding: x-xsrf-token
//     forward_rule:
//       name: authorization
//       preamble: Bearer
//
// [#not-implemented-hide:]
type SessionManager struct {
	// The 256-bit base64 encoded shared secret used to validate cryptographic session token bindings.
	TokenBinding *TokenBinding `protobuf:"bytes,1,opt,name=token_binding,json=tokenBinding,proto3" json:"token_binding,omitempty"`
	// The header that the session token should be forwarded in.
	ForwardRule          *ForwardRule `protobuf:"bytes,2,opt,name=forward_rule,json=forwardRule,proto3" json:"forward_rule,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SessionManager) Reset()         { *m = SessionManager{} }
func (m *SessionManager) String() string { return proto.CompactTextString(m) }
func (*SessionManager) ProtoMessage()    {}
func (*SessionManager) Descriptor() ([]byte, []int) {
	return fileDescriptor_config_0219500859f2b66b, []int{2}
}
func (m *SessionManager) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionManager) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionManager.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SessionManager) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionManager.Merge(dst, src)
}
func (m *SessionManager) XXX_Size() int {
	return m.Size()
}
func (m *SessionManager) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionManager.DiscardUnknown(m)
}

var xxx_messageInfo_SessionManager proto.InternalMessageInfo

func (m *SessionManager) GetTokenBinding() *TokenBinding {
	if m != nil {
		return m.TokenBinding
	}
	return nil
}

func (m *SessionManager) GetForwardRule() *ForwardRule {
	if m != nil {
		return m.ForwardRule
	}
	return nil
}

func init() {
	proto.RegisterType((*ForwardRule)(nil), "envoy.config.filter.http.session_manager.v1alpha.ForwardRule")
	proto.RegisterType((*TokenBinding)(nil), "envoy.config.filter.http.session_manager.v1alpha.TokenBinding")
	proto.RegisterType((*SessionManager)(nil), "envoy.config.filter.http.session_manager.v1alpha.SessionManager")
	proto.RegisterEnum("envoy.config.filter.http.session_manager.v1alpha.TokenBinding_HkdfHash", TokenBinding_HkdfHash_name, TokenBinding_HkdfHash_value)
	proto.RegisterEnum("envoy.config.filter.http.session_manager.v1alpha.TokenBinding_EncryptionAlg", TokenBinding_EncryptionAlg_name, TokenBinding_EncryptionAlg_value)
}
func (m *ForwardRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForwardRule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Preamble) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Preamble)))
		i += copy(dAtA[i:], m.Preamble)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TokenBinding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenBinding) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Secret) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Secret)))
		i += copy(dAtA[i:], m.Secret)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.Binding) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Binding)))
		i += copy(dAtA[i:], m.Binding)
	}
	if m.HkdfHash != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintConfig(dAtA, i, uint64(m.HkdfHash))
	}
	if m.EncryptionAlg != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintConfig(dAtA, i, uint64(m.EncryptionAlg))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SessionManager) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionManager) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TokenBinding != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConfig(dAtA, i, uint64(m.TokenBinding.Size()))
		n1, err := m.TokenBinding.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.ForwardRule != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintConfig(dAtA, i, uint64(m.ForwardRule.Size()))
		n2, err := m.ForwardRule.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintConfig(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ForwardRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.Preamble)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TokenBinding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.Binding)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.HkdfHash != 0 {
		n += 1 + sovConfig(uint64(m.HkdfHash))
	}
	if m.EncryptionAlg != 0 {
		n += 1 + sovConfig(uint64(m.EncryptionAlg))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SessionManager) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TokenBinding != nil {
		l = m.TokenBinding.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.ForwardRule != nil {
		l = m.ForwardRule.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovConfig(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozConfig(x uint64) (n int) {
	return sovConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ForwardRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForwardRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForwardRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preamble", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Preamble = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenBinding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenBinding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenBinding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Binding", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Binding = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HkdfHash", wireType)
			}
			m.HkdfHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HkdfHash |= (TokenBinding_HkdfHash(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionAlg", wireType)
			}
			m.EncryptionAlg = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptionAlg |= (TokenBinding_EncryptionAlg(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionManager) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionManager: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionManager: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenBinding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenBinding == nil {
				m.TokenBinding = &TokenBinding{}
			}
			if err := m.TokenBinding.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ForwardRule == nil {
				m.ForwardRule = &ForwardRule{}
			}
			if err := m.ForwardRule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthConfig
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowConfig
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipConfig(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthConfig = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfig   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("envoy/config/filter/http/session_manager/v1alpha/config.proto", fileDescriptor_config_0219500859f2b66b)
}

var fileDescriptor_config_0219500859f2b66b = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xed, 0x26, 0x69, 0x48, 0x26, 0x1f, 0x8a, 0x56, 0x48, 0x58, 0x48, 0x44, 0x91, 0x25, 0xa4,
	0x08, 0x95, 0x35, 0x71, 0x49, 0xd5, 0x4b, 0x91, 0x12, 0x54, 0x9a, 0x03, 0xbd, 0x6c, 0xb8, 0x87,
	0x4d, 0xbc, 0xfe, 0x50, 0x9c, 0xb5, 0xb5, 0xde, 0x06, 0xf5, 0xff, 0xf0, 0x2b, 0x38, 0x71, 0xe4,
	0xc8, 0x8d, 0x2b, 0xca, 0x8d, 0x7f, 0x81, 0xec, 0x5d, 0x17, 0xd3, 0x5b, 0xd5, 0xdb, 0x7b, 0xe3,
	0x79, 0x6f, 0xc6, 0xb3, 0x0f, 0x2e, 0xb8, 0xd8, 0x27, 0xb7, 0xce, 0x26, 0x11, 0x7e, 0x14, 0x38,
	0x7e, 0x14, 0x2b, 0x2e, 0x9d, 0x50, 0xa9, 0xd4, 0xc9, 0x78, 0x96, 0x45, 0x89, 0x58, 0xed, 0x98,
	0x60, 0x01, 0x97, 0xce, 0x7e, 0xc2, 0xe2, 0x34, 0x64, 0xa6, 0x95, 0xa4, 0x32, 0x51, 0x09, 0x7e,
	0x53, 0xc8, 0x89, 0xa9, 0x69, 0x39, 0xc9, 0xe5, 0xe4, 0x9e, 0x9c, 0x18, 0xf9, 0xf3, 0x67, 0x7b,
	0x16, 0x47, 0x1e, 0x53, 0xdc, 0x29, 0x81, 0xb6, 0xb2, 0x97, 0xd0, 0xf9, 0x90, 0xc8, 0x2f, 0x4c,
	0x7a, 0xf4, 0x26, 0xe6, 0xf8, 0x05, 0x34, 0x04, 0xdb, 0x71, 0x0b, 0x8d, 0xd0, 0xb8, 0x3d, 0x6f,
	0x7f, 0xfb, 0xf3, 0xbd, 0xde, 0x90, 0xb5, 0x11, 0xa2, 0x45, 0x19, 0xbf, 0x84, 0x56, 0x2a, 0x39,
	0xdb, 0xad, 0x63, 0x6e, 0xd5, 0xee, 0xb7, 0xdc, 0x7d, 0xb2, 0xbf, 0xd6, 0xa1, 0xfb, 0x29, 0xd9,
	0x72, 0x31, 0x8f, 0x84, 0x17, 0x89, 0x00, 0xbf, 0x82, 0x66, 0xc6, 0x37, 0x92, 0x2b, 0x63, 0x8c,
	0x4b, 0xd5, 0x89, 0x01, 0xe3, 0x13, 0x6a, 0x3a, 0xf0, 0x53, 0x38, 0x56, 0xb9, 0x56, 0x0f, 0xa0,
	0x9a, 0x60, 0x0b, 0x9e, 0xac, 0xb5, 0x99, 0x55, 0x2f, 0xea, 0x25, 0xc5, 0x1e, 0xb4, 0xc3, 0xad,
	0xe7, 0xaf, 0x42, 0x96, 0x85, 0x56, 0x63, 0x84, 0xc6, 0x7d, 0xf7, 0x8a, 0x3c, 0xf4, 0x40, 0xa4,
	0xba, 0x2e, 0x59, 0x6c, 0x3d, 0x7f, 0xc1, 0xb2, 0x90, 0xb6, 0x42, 0x83, 0x70, 0x06, 0x7d, 0x2e,
	0x36, 0xf2, 0x36, 0x55, 0xb9, 0x9a, 0xc5, 0x81, 0x75, 0x5c, 0x8c, 0xfa, 0xf8, 0xc8, 0x51, 0x97,
	0x77, 0xa6, 0xb3, 0x38, 0xa0, 0x3d, 0x5e, 0xa5, 0x36, 0x81, 0x56, 0xb9, 0x0a, 0x06, 0x68, 0x2e,
	0x17, 0x33, 0x77, 0x7a, 0x36, 0x38, 0x32, 0xf8, 0xf4, 0xfc, 0xed, 0x00, 0x19, 0x3c, 0x9d, 0xb8,
	0x83, 0x9a, 0xfd, 0x1a, 0x7a, 0xff, 0xf9, 0xe1, 0x1e, 0xb4, 0x67, 0x97, 0xcb, 0x89, 0x7b, 0x7e,
	0xf5, 0xfe, 0x7a, 0x70, 0x64, 0xa8, 0x3b, 0x3d, 0xcb, 0x29, 0xb2, 0x7f, 0x21, 0xe8, 0x2f, 0xf5,
	0x92, 0xd7, 0x7a, 0x47, 0xbc, 0x81, 0x5e, 0x71, 0xef, 0x55, 0x79, 0xec, 0xfc, 0xbd, 0x3a, 0xee,
	0xbb, 0xc7, 0xfd, 0x25, 0xed, 0xaa, 0x6a, 0x1a, 0x3e, 0x43, 0xd7, 0xd7, 0x99, 0x5b, 0xc9, 0x1b,
	0x93, 0xa4, 0x8e, 0x7b, 0xf1, 0xf0, 0x19, 0x95, 0xe4, 0xd2, 0x8e, 0xff, 0x8f, 0xcc, 0xbb, 0x3f,
	0x0e, 0x43, 0xf4, 0xf3, 0x30, 0x44, 0xbf, 0x0f, 0x43, 0xb4, 0x6e, 0x16, 0x51, 0x3f, 0xfd, 0x1b,
	0x00, 0x00, 0xff, 0xff, 0x2b, 0xc0, 0xbb, 0x45, 0x76, 0x03, 0x00, 0x00,
}
