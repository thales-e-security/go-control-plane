// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: envoy/config/filter/http/oidc/v1alpha/config.proto

package envoy_config_filter_http_oidc_v1alpha

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import core "github.com/envoyproxy/go-control-plane/envoy/api/v2/core"
import v1alpha "github.com/envoyproxy/go-control-plane/envoy/config/filter/http/session_manager/v1alpha"
import _ "github.com/lyft/protoc-gen-validate/validate"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// This message specifies the configuration of an OpenID Connect Client or relying-party (RP).
// See https://openid.net/specs/openid-connect-core-1_0.html for more details.
//
// Example:
//
// .. code-block:: yaml
//
//     authorization_endpoint:
//       uri: https://acme-idp.com/authorization
//       cluster: tenant1-cluster
//     token_endpoint:
//       uri: https://acme-idp.com/token
//       cluster: tenant1-cluster
//     jwks_uri:
//       uri: https://acme-idp.com/.well-known/jwks
//       cluster: tenant1-cluster
//     client_id: client-10
//     client_secret: ABCDEF0123456789
//
// [#not-implemented-hide:]
type OidcClient struct {
	// The authorization endpoint where a user can be authenticated.
	AuthorizationEndpoint *core.HttpUri `protobuf:"bytes,1,opt,name=authorization_endpoint,json=authorizationEndpoint" json:"authorization_endpoint,omitempty"`
	// The token endpoint where authorizaion and ID tokens can be redeemed.
	TokenEndpoint *core.HttpUri `protobuf:"bytes,2,opt,name=token_endpoint,json=tokenEndpoint" json:"token_endpoint,omitempty"`
	// The JWKS endpoint where an OpenID Connect provider's signing keys can be obtained.
	JwksUri *core.HttpUri `protobuf:"bytes,3,opt,name=jwks_uri,json=jwksUri" json:"jwks_uri,omitempty"`
	// The unique client identity.
	ClientId string `protobuf:"bytes,4,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// The shared client secret. This field is security sensitive.
	ClientSecret         string   `protobuf:"bytes,5,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OidcClient) Reset()         { *m = OidcClient{} }
func (m *OidcClient) String() string { return proto.CompactTextString(m) }
func (*OidcClient) ProtoMessage()    {}
func (*OidcClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_config_cd4e2ff10a05565f, []int{0}
}
func (m *OidcClient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OidcClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OidcClient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OidcClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OidcClient.Merge(dst, src)
}
func (m *OidcClient) XXX_Size() int {
	return m.Size()
}
func (m *OidcClient) XXX_DiscardUnknown() {
	xxx_messageInfo_OidcClient.DiscardUnknown(m)
}

var xxx_messageInfo_OidcClient proto.InternalMessageInfo

func (m *OidcClient) GetAuthorizationEndpoint() *core.HttpUri {
	if m != nil {
		return m.AuthorizationEndpoint
	}
	return nil
}

func (m *OidcClient) GetTokenEndpoint() *core.HttpUri {
	if m != nil {
		return m.TokenEndpoint
	}
	return nil
}

func (m *OidcClient) GetJwksUri() *core.HttpUri {
	if m != nil {
		return m.JwksUri
	}
	return nil
}

func (m *OidcClient) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *OidcClient) GetClientSecret() string {
	if m != nil {
		return m.ClientSecret
	}
	return ""
}

// A Match maps an incoming request to an IdP based on a specified HTTP header and it's value.
//
// Example:
//
// .. code-block:: yaml
//
//     idP:
//       authorization_endpoint:
//         uri: https://acme-idp.com/authorization
//         cluster: tenant1-cluster
//       token_endpoint:
//         uri: https://acme-idp.com/token
//         cluster: tenant1-cluster
//       jwks_uri:
//         uri: https://acme-idp.com/.well-known/jwks
//         cluster: tenant1-cluster
//       client_id: client-10
//       client_secret: ABCDEF0123456789
//     criteria:
//       header: ":authority"
//       value: "tenant1.acme.com"
//
// [#not-implemented-hide:]
type Match struct {
	// Details of the registered external OpenID Connect Identity Provider (IdP).
	Idp *OidcClient `protobuf:"bytes,1,opt,name=idp" json:"idp,omitempty"`
	// Criteria by which to match against
	Criteria             *Match_Criteria `protobuf:"bytes,2,opt,name=criteria" json:"criteria,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Match) Reset()         { *m = Match{} }
func (m *Match) String() string { return proto.CompactTextString(m) }
func (*Match) ProtoMessage()    {}
func (*Match) Descriptor() ([]byte, []int) {
	return fileDescriptor_config_cd4e2ff10a05565f, []int{1}
}
func (m *Match) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Match) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Match.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Match) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Match.Merge(dst, src)
}
func (m *Match) XXX_Size() int {
	return m.Size()
}
func (m *Match) XXX_DiscardUnknown() {
	xxx_messageInfo_Match.DiscardUnknown(m)
}

var xxx_messageInfo_Match proto.InternalMessageInfo

func (m *Match) GetIdp() *OidcClient {
	if m != nil {
		return m.Idp
	}
	return nil
}

func (m *Match) GetCriteria() *Match_Criteria {
	if m != nil {
		return m.Criteria
	}
	return nil
}

// Criteria for mapping incoming requests to an IdP.
type Match_Criteria struct {
	// Match by 1) a header and 2) the value of the header
	Header               string   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Match_Criteria) Reset()         { *m = Match_Criteria{} }
func (m *Match_Criteria) String() string { return proto.CompactTextString(m) }
func (*Match_Criteria) ProtoMessage()    {}
func (*Match_Criteria) Descriptor() ([]byte, []int) {
	return fileDescriptor_config_cd4e2ff10a05565f, []int{1, 0}
}
func (m *Match_Criteria) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Match_Criteria) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Match_Criteria.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Match_Criteria) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Match_Criteria.Merge(dst, src)
}
func (m *Match_Criteria) XXX_Size() int {
	return m.Size()
}
func (m *Match_Criteria) XXX_DiscardUnknown() {
	xxx_messageInfo_Match_Criteria.DiscardUnknown(m)
}

var xxx_messageInfo_Match_Criteria proto.InternalMessageInfo

func (m *Match_Criteria) GetHeader() string {
	if m != nil {
		return m.Header
	}
	return ""
}

func (m *Match_Criteria) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// This message specifies the configuration of an OpenID Connect filter that allows:
//   1) Envoy to act as a client in the Authorization Code Flow (https://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth) so to
//     a) Ascertain an identity provider for authenticating the user based on an HTTP header.
//     b) Acquire transparently or otherwise an identity token representing an end-user.
//     c) Derive from the acquired identity token a set of session tokens.
//     d) The generation of a session protection cookie, called a binding, to mitigate cross-site request forgery and Person-in-the-browser
//        (PiTB, MiTB) attacks.
//
// Example:
//
// .. code-block:: yaml
//
//     matches:
//       tenant1.acme.com:
//         idp:
//           authorization_endpoint:
//             uri: https://acme-idp.com/authorization
//             cluster: tenant1-cluster
//           token_endpoint:
//             uri: https://acme-idp.com/token
//             cluster: tenant1-cluster
//           jwks_uri:
//             uri: https://acme-idp.com/.well-known/jwks
//             cluster: tenant1-cluster
//           client_id: client-10
//           client_secret: ABCDEF0123456789
//         criteria:
//           header: :authority
//           value: tenant1.acme.com
//       tenant2.acme.com:
//         idp:
//           authorization_endpoint:
//             uri: https://acme-idp.com/authorization
//             cluster: tenant1-cluster
//           token_endpoint:
//             uri: https://acme-idp.com/token
//             cluster: tenant1-cluster
//           jwks_uri:
//             uri: https://acme-idp.com/.well-known/jwks
//             cluster: tenant2-cluster
//           client_id: client-26
//           client_secret: 0123456789ABCDEF
//         criteria:
//           header: x-custom-header
//           value: tenant2.acme.com
//     authentication_callback: "/oidc/authenticate"
//     landing_page: "/home"
//     token_binding:
//       secret: Mb07unY1jd4h2s5wUSO9KJzhqjVTazXMWCp4OAiiGko=
//       token: __Secure-acme-session-cookie
//       binding: x-xsrf-token
//
// [#not-implemented-hide:]
type OidcConfig struct {
	// An ordered map of Match rules which maps a request to an IDP.
	// If a request can be matched by more than rule then the first in the list will be chosen.
	Matches map[string]*Match `protobuf:"bytes,1,rep,name=matches" json:"matches,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	// The path that receives an authentication reply from an OIDC provider.
	// Values for this should be chosen to be unique and so not to clash with services being fronted.
	// The value of this field should be an absolute path value and not include a host or port specifier.
	AuthenticationCallback string `protobuf:"bytes,2,opt,name=authentication_callback,json=authenticationCallback,proto3" json:"authentication_callback,omitempty"`
	// The landing page to redirect to after successful authentication.
	LandingPage string `protobuf:"bytes,3,opt,name=landing_page,json=landingPage,proto3" json:"landing_page,omitempty"`
	// Session token configuration.
	Binding              *v1alpha.TokenBinding `protobuf:"bytes,4,opt,name=binding" json:"binding,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *OidcConfig) Reset()         { *m = OidcConfig{} }
func (m *OidcConfig) String() string { return proto.CompactTextString(m) }
func (*OidcConfig) ProtoMessage()    {}
func (*OidcConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_config_cd4e2ff10a05565f, []int{2}
}
func (m *OidcConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OidcConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OidcConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OidcConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OidcConfig.Merge(dst, src)
}
func (m *OidcConfig) XXX_Size() int {
	return m.Size()
}
func (m *OidcConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_OidcConfig.DiscardUnknown(m)
}

var xxx_messageInfo_OidcConfig proto.InternalMessageInfo

func (m *OidcConfig) GetMatches() map[string]*Match {
	if m != nil {
		return m.Matches
	}
	return nil
}

func (m *OidcConfig) GetAuthenticationCallback() string {
	if m != nil {
		return m.AuthenticationCallback
	}
	return ""
}

func (m *OidcConfig) GetLandingPage() string {
	if m != nil {
		return m.LandingPage
	}
	return ""
}

func (m *OidcConfig) GetBinding() *v1alpha.TokenBinding {
	if m != nil {
		return m.Binding
	}
	return nil
}

func init() {
	proto.RegisterType((*OidcClient)(nil), "envoy.config.filter.http.oidc.v1alpha.OidcClient")
	proto.RegisterType((*Match)(nil), "envoy.config.filter.http.oidc.v1alpha.Match")
	proto.RegisterType((*Match_Criteria)(nil), "envoy.config.filter.http.oidc.v1alpha.Match.Criteria")
	proto.RegisterType((*OidcConfig)(nil), "envoy.config.filter.http.oidc.v1alpha.OidcConfig")
	proto.RegisterMapType((map[string]*Match)(nil), "envoy.config.filter.http.oidc.v1alpha.OidcConfig.MatchesEntry")
}
func (m *OidcClient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OidcClient) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AuthorizationEndpoint != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConfig(dAtA, i, uint64(m.AuthorizationEndpoint.Size()))
		n1, err := m.AuthorizationEndpoint.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.TokenEndpoint != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintConfig(dAtA, i, uint64(m.TokenEndpoint.Size()))
		n2, err := m.TokenEndpoint.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.JwksUri != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintConfig(dAtA, i, uint64(m.JwksUri.Size()))
		n3, err := m.JwksUri.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.ClientId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.ClientId)))
		i += copy(dAtA[i:], m.ClientId)
	}
	if len(m.ClientSecret) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.ClientSecret)))
		i += copy(dAtA[i:], m.ClientSecret)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Match) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Match) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Idp != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConfig(dAtA, i, uint64(m.Idp.Size()))
		n4, err := m.Idp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Criteria != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintConfig(dAtA, i, uint64(m.Criteria.Size()))
		n5, err := m.Criteria.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Match_Criteria) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Match_Criteria) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Header) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Header)))
		i += copy(dAtA[i:], m.Header)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OidcConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OidcConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Matches) > 0 {
		for k, _ := range m.Matches {
			dAtA[i] = 0xa
			i++
			v := m.Matches[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovConfig(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovConfig(uint64(len(k))) + msgSize
			i = encodeVarintConfig(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintConfig(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintConfig(dAtA, i, uint64(v.Size()))
				n6, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n6
			}
		}
	}
	if len(m.AuthenticationCallback) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.AuthenticationCallback)))
		i += copy(dAtA[i:], m.AuthenticationCallback)
	}
	if len(m.LandingPage) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.LandingPage)))
		i += copy(dAtA[i:], m.LandingPage)
	}
	if m.Binding != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintConfig(dAtA, i, uint64(m.Binding.Size()))
		n7, err := m.Binding.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintConfig(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *OidcClient) Size() (n int) {
	var l int
	_ = l
	if m.AuthorizationEndpoint != nil {
		l = m.AuthorizationEndpoint.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.TokenEndpoint != nil {
		l = m.TokenEndpoint.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.JwksUri != nil {
		l = m.JwksUri.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.ClientSecret)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Match) Size() (n int) {
	var l int
	_ = l
	if m.Idp != nil {
		l = m.Idp.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Criteria != nil {
		l = m.Criteria.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Match_Criteria) Size() (n int) {
	var l int
	_ = l
	l = len(m.Header)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OidcConfig) Size() (n int) {
	var l int
	_ = l
	if len(m.Matches) > 0 {
		for k, v := range m.Matches {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovConfig(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovConfig(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovConfig(uint64(mapEntrySize))
		}
	}
	l = len(m.AuthenticationCallback)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.LandingPage)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Binding != nil {
		l = m.Binding.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovConfig(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozConfig(x uint64) (n int) {
	return sovConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OidcClient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OidcClient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OidcClient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizationEndpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthorizationEndpoint == nil {
				m.AuthorizationEndpoint = &core.HttpUri{}
			}
			if err := m.AuthorizationEndpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenEndpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenEndpoint == nil {
				m.TokenEndpoint = &core.HttpUri{}
			}
			if err := m.TokenEndpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwksUri", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JwksUri == nil {
				m.JwksUri = &core.HttpUri{}
			}
			if err := m.JwksUri.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Match) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Match: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Match: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Idp == nil {
				m.Idp = &OidcClient{}
			}
			if err := m.Idp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Criteria", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Criteria == nil {
				m.Criteria = &Match_Criteria{}
			}
			if err := m.Criteria.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Match_Criteria) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Criteria: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Criteria: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Header = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OidcConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OidcConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OidcConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Matches == nil {
				m.Matches = make(map[string]*Match)
			}
			var mapkey string
			var mapvalue *Match
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowConfig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowConfig
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthConfig
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowConfig
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthConfig
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthConfig
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Match{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipConfig(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthConfig
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Matches[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationCallback", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthenticationCallback = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LandingPage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LandingPage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Binding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Binding == nil {
				m.Binding = &v1alpha.TokenBinding{}
			}
			if err := m.Binding.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthConfig
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowConfig
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipConfig(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthConfig = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfig   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("envoy/config/filter/http/oidc/v1alpha/config.proto", fileDescriptor_config_cd4e2ff10a05565f)
}

var fileDescriptor_config_cd4e2ff10a05565f = []byte{
	// 550 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xcf, 0x6b, 0x13, 0x41,
	0x14, 0x66, 0xb3, 0xfd, 0x91, 0x9d, 0xa4, 0x22, 0x83, 0xb6, 0x21, 0x87, 0x10, 0x03, 0x4a, 0x0e,
	0x32, 0x4b, 0x57, 0x8a, 0x45, 0x50, 0x30, 0xa1, 0xa0, 0x87, 0xa2, 0x5d, 0x2d, 0x78, 0x0b, 0x93,
	0xd9, 0x69, 0xf6, 0x99, 0xed, 0xec, 0x32, 0x3b, 0x59, 0x89, 0x7f, 0x80, 0xff, 0x8f, 0x57, 0x4f,
	0x1e, 0x3d, 0x7a, 0xf5, 0x26, 0xb9, 0xf9, 0x5f, 0xc8, 0xfc, 0x48, 0x4c, 0x8b, 0xda, 0xf6, 0x36,
	0x33, 0xef, 0x7d, 0xdf, 0xfb, 0xbe, 0xf7, 0xde, 0xa0, 0x88, 0x8b, 0x2a, 0x9f, 0x87, 0x2c, 0x17,
	0x67, 0x30, 0x09, 0xcf, 0x20, 0x53, 0x5c, 0x86, 0xa9, 0x52, 0x45, 0x98, 0x43, 0xc2, 0xc2, 0x6a,
	0x9f, 0x66, 0x45, 0x4a, 0x5d, 0x9c, 0x14, 0x32, 0x57, 0x39, 0xbe, 0x6f, 0x30, 0xc4, 0xbd, 0x59,
	0x0c, 0xd1, 0x18, 0xa2, 0x31, 0xc4, 0x61, 0xda, 0x7b, 0x15, 0xcd, 0x20, 0xa1, 0x8a, 0x87, 0xcb,
	0x83, 0xc5, 0xb7, 0xbb, 0xb6, 0x26, 0x2d, 0x20, 0xac, 0xa2, 0x90, 0xe5, 0x92, 0x9b, 0x8a, 0xa3,
	0x99, 0x04, 0x97, 0xf1, 0xf4, 0x9f, 0xaa, 0x4a, 0x5e, 0x96, 0x90, 0x8b, 0xd1, 0x39, 0x15, 0x74,
	0xc2, 0xe5, 0x5f, 0x05, 0xf6, 0x3e, 0xd7, 0x10, 0x7a, 0x05, 0x09, 0x1b, 0x66, 0xc0, 0x85, 0xc2,
	0x27, 0x68, 0x97, 0xce, 0x54, 0x9a, 0x4b, 0xf8, 0x48, 0x95, 0x06, 0x73, 0x91, 0x14, 0x39, 0x08,
	0xd5, 0xf2, 0xba, 0x5e, 0xbf, 0x11, 0xb5, 0x89, 0x35, 0x44, 0x0b, 0x20, 0x55, 0x44, 0xb4, 0x20,
	0xf2, 0x42, 0xa9, 0xe2, 0x54, 0x42, 0x7c, 0xf7, 0x02, 0xf2, 0xc8, 0x01, 0xf1, 0x73, 0x74, 0x4b,
	0xe5, 0x53, 0xbe, 0x46, 0x55, 0xbb, 0x92, 0x6a, 0xc7, 0x20, 0x56, 0x14, 0x07, 0xa8, 0xfe, 0xfe,
	0xc3, 0xb4, 0xd4, 0xae, 0x5b, 0xfe, 0x95, 0xe0, 0x6d, 0x9d, 0x7b, 0x2a, 0x01, 0x3f, 0x40, 0x01,
	0x33, 0xb6, 0x46, 0x90, 0xb4, 0x36, 0xba, 0x5e, 0x3f, 0x18, 0x04, 0x5f, 0x7e, 0x7d, 0xf5, 0x37,
	0x64, 0xad, 0xeb, 0xc5, 0x75, 0x1b, 0x7b, 0x99, 0x60, 0x82, 0x76, 0x5c, 0x5e, 0xc9, 0x99, 0xe4,
	0xaa, 0xb5, 0x79, 0x39, 0xb7, 0x69, 0xe3, 0x6f, 0x4c, 0xb8, 0xf7, 0xc3, 0x43, 0x9b, 0xc7, 0x54,
	0xb1, 0x14, 0x0f, 0x91, 0x0f, 0x49, 0xe1, 0x7a, 0xb3, 0x4f, 0xae, 0x35, 0x6c, 0xf2, 0xa7, 0xdd,
	0xb1, 0x46, 0xe3, 0x13, 0x54, 0x67, 0x12, 0x14, 0x97, 0x40, 0x5d, 0x6b, 0x0e, 0xae, 0xc9, 0x64,
	0x44, 0x90, 0xa1, 0x03, 0xc7, 0x2b, 0x9a, 0xf6, 0x21, 0xaa, 0x2f, 0x5f, 0xf1, 0x2e, 0xda, 0x4a,
	0x39, 0x4d, 0xb8, 0x34, 0x32, 0x83, 0xd8, 0xdd, 0xf0, 0x1d, 0xb4, 0x59, 0xd1, 0x6c, 0xc6, 0x4d,
	0xcd, 0x20, 0xb6, 0x97, 0xde, 0x27, 0xdf, 0xed, 0x83, 0x29, 0x8d, 0xdf, 0xa1, 0xed, 0x73, 0x5d,
	0x84, 0x97, 0x2d, 0xaf, 0xeb, 0xf7, 0x1b, 0xd1, 0xb3, 0x9b, 0x98, 0xb4, 0x39, 0xc7, 0x96, 0xe0,
	0x48, 0x28, 0x39, 0x8f, 0x97, 0x74, 0xf8, 0x31, 0xda, 0xd3, 0xfb, 0xc2, 0x85, 0x02, 0x66, 0x57,
	0x8d, 0xd1, 0x2c, 0x1b, 0x53, 0x36, 0x75, 0x82, 0x76, 0x2f, 0x86, 0x87, 0x2e, 0x8a, 0xef, 0xa1,
	0x66, 0x46, 0x45, 0x02, 0x62, 0x32, 0x2a, 0xe8, 0x84, 0x9b, 0x85, 0x08, 0xe2, 0x86, 0x7b, 0x7b,
	0x4d, 0x27, 0x5c, 0xab, 0x1e, 0x83, 0xb9, 0x9a, 0xb1, 0xff, 0x57, 0xf5, 0xa5, 0x5f, 0xb2, 0x32,
	0xf0, 0x56, 0x6f, 0xe0, 0xc0, 0xb2, 0xc4, 0x4b, 0xba, 0x76, 0x8a, 0x9a, 0xeb, 0x76, 0xf0, 0x6d,
	0xe4, 0x4f, 0xf9, 0xdc, 0x75, 0x56, 0x1f, 0xf1, 0x60, 0xbd, 0xad, 0x8d, 0xe8, 0xe1, 0x4d, 0x46,
	0xe9, 0x86, 0xf0, 0xa4, 0x76, 0xe8, 0x0d, 0x9a, 0xdf, 0x16, 0x1d, 0xef, 0xfb, 0xa2, 0xe3, 0xfd,
	0x5c, 0x74, 0xbc, 0xf1, 0x96, 0xf9, 0xad, 0x8f, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x60, 0x2b,
	0x76, 0xdc, 0x84, 0x04, 0x00, 0x00,
}
