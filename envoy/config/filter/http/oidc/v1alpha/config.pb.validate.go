// Code generated by protoc-gen-validate
// source: envoy/config/filter/http/oidc/v1alpha/config.proto
// DO NOT EDIT!!!

package envoy_config_filter_http_oidc_v1alpha

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// Validate checks the field values on OidcClient with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *OidcClient) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetAuthorizationEndpoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OidcClientValidationError{
				Field:  "AuthorizationEndpoint",
				Reason: "embedded message failed validation",
				Cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTokenEndpoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OidcClientValidationError{
				Field:  "TokenEndpoint",
				Reason: "embedded message failed validation",
				Cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetJwksUri()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OidcClientValidationError{
				Field:  "JwksUri",
				Reason: "embedded message failed validation",
				Cause:  err,
			}
		}
	}

	if len(m.GetClientId()) < 1 {
		return OidcClientValidationError{
			Field:  "ClientId",
			Reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetClientSecret()) < 1 {
		return OidcClientValidationError{
			Field:  "ClientSecret",
			Reason: "value length must be at least 1 bytes",
		}
	}

	return nil
}

// OidcClientValidationError is the validation error returned by
// OidcClient.Validate if the designated constraints aren't met.
type OidcClientValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e OidcClientValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOidcClient.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = OidcClientValidationError{}

// Validate checks the field values on Match with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Match) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetIdp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MatchValidationError{
				Field:  "Idp",
				Reason: "embedded message failed validation",
				Cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCriteria()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MatchValidationError{
				Field:  "Criteria",
				Reason: "embedded message failed validation",
				Cause:  err,
			}
		}
	}

	return nil
}

// MatchValidationError is the validation error returned by Match.Validate if
// the designated constraints aren't met.
type MatchValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e MatchValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMatch.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = MatchValidationError{}

// Validate checks the field values on OidcConfig with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *OidcConfig) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Matches

	// no validation rules for AuthenticationCallback

	// no validation rules for LandingPage

	if v, ok := interface{}(m.GetBinding()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OidcConfigValidationError{
				Field:  "Binding",
				Reason: "embedded message failed validation",
				Cause:  err,
			}
		}
	}

	return nil
}

// OidcConfigValidationError is the validation error returned by
// OidcConfig.Validate if the designated constraints aren't met.
type OidcConfigValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e OidcConfigValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOidcConfig.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = OidcConfigValidationError{}

// Validate checks the field values on Match_Criteria with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Match_Criteria) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Header

	// no validation rules for Value

	return nil
}

// Match_CriteriaValidationError is the validation error returned by
// Match_Criteria.Validate if the designated constraints aren't met.
type Match_CriteriaValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e Match_CriteriaValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMatch_Criteria.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = Match_CriteriaValidationError{}
